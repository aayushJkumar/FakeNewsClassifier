# -*- coding: utf-8 -*-
"""FakeNewsClassifierUsingBidirectionalLSTM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hXlUnSH8UGQ6OhQPJU9AbnF8AGzgFkEZ
"""

!pip install opendatasets
!pip install -q kaggle

import numpy as np
import pandas as pd
import opendatasets as od

from google.colab import drive
drive.mount('/content/drive')

od.download("https://www.kaggle.com/c/fake-news/data#")

df=pd.read_csv("/content/fake-news/train.csv")

df.head()

df=df.dropna()

X=df.drop('label',axis=1)
y=df['label']

y.value_counts()

X.shape

y.shape

import tensorflow as tf

from keras.layers import Embedding
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.preprocessing.text import one_hot
from keras.layers import LSTM
from keras.layers import Dense
from keras.layers import Bidirectional
from keras.layers import Dropout

voc_size=5000

message=X.copy()

message.head()

message.index

message.reset_index(inplace=True)

message.head()

import nltk
import re
from nltk.corpus import stopwords

nltk.download('stopwords')

from nltk.stem import WordNetLemmatizer
lemmatizer=WordNetLemmatizer()

nltk.download('popular')

corpus = []
for i in range(0, len(message)):
    print(i)
    review = re.sub('[^a-zA-Z]', ' ', message['title'][i])
    review = review.lower()
    review = review.split()
    
    review = [lemmatizer.lemmatize(word) for word in review if not word in stopwords.words('english')]
    review = ' '.join(review)
    corpus.append(review)

corpus

onehot_repr=[one_hot(words,voc_size)for words in corpus] 
onehot_repr

sent_length=20
embedded_docs=pad_sequences(onehot_repr,padding='pre',maxlen=sent_length)
print(embedded_docs)

embedding_vector_features=40
model=Sequential()
model.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))
model.add(LSTM(100))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
print(model.summary())

# ## Creating model
# embedding_vector_features=40
# model1=Sequential()
# model1.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))
# model1.add(Bidirectional(LSTM(100)))
# model1.add(Dropout(0.3))
# model1.add(Dense(1,activation='sigmoid'))
# model1.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
# print(model1.summary())

X_final=np.array(embedded_docs)
y_final=np.array(y)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.33, random_state=42)

model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=50,batch_size=64)

predictions = (model.predict(X_test) > 0.5).astype("int32")

from sklearn.metrics import accuracy_score
accuracy_score(y_test,predictions)

from sklearn.metrics import classification_report
print(classification_report(y_test,predictions))

